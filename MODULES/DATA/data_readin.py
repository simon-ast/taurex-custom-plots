"""
Reading and preparing result data for plotting

TODO: Solution read-in needs
    - Basic identifiers
    - Storage of Priors
    - Storage of binned and unbinned solution
    - Storage of contributions (mol. absorpt., rayleigh, etc)
        - Iterative filling (if present, then use etc.)
    - Storage of stats data (evidence etc)
"""
import h5py as h5
import numpy as np


# TODO: Get correct type hinting for return of this function
def create_taurex_solution(filename: str, name_id: str, colour: str):
    """
    Data read in wrapper, which takes the file name (absolute) and
    desired name ID for the solution as arguments. Input must be a
    hdf5-file generated by TauREx!
    """
    # Access hdf5 file structure down to "solution0" group. I'm not
    # sure why these are numbered, as I can see (for now) no way to
    # store multiple solutions in the same file
    # TODO: I might be missing something here!
    file_raw = h5.File(filename)
    taurex_solution = file_raw["Output"]["Solutions"]["solution0"]

    taurex_stored = TaurexSolution(solution_group=taurex_solution,
                                   identifier=name_id,
                                   colour=colour)

    return taurex_stored


class TaurexSolution:
    """
    Wrapper class for all parameters of a specific TauREx retrieval
    solution. The solution is identified by a name ("identifier") and
    needs a hdf5-group from the TauREx retrieval file as an input
    ("solution group")
    """
    def __init__(self, solution_group,
                 identifier: str = "Solution",
                 colour: str = "tab:blue"):
        # TODO: Sort out hdf5 group - type hinting
        self.name_id = identifier
        self.colour = colour

        # Data for the forward model spectrum is stored in the group
        # "Spectra"
        spectrum = solution_group["Spectra"]
        self.bin_solution = Spectrum("binned", spectrum)
        self.nat_solution = Spectrum("native", spectrum)

        # Statistical data is stored in the group "Statistics"
        stats = solution_group["Statistics"]
        self.logev = stats["Log-Evidence"][()]
        self.del_logev = stats["Log-Evidence-Error"][()]
        self.peakiness = stats["Peakiness"][()]

        # Individual contributions to the forward model are stored in
        # the group "Contributions" within "Spectra"
        # TODO: Sort out contribution loop for all parts
        contrib = spectrum["Contributions"]

        # TODO: Sort out handling of fit parameters and priors


class Spectrum:
    # TODO: Get identifier for the hdf5-group "spectrum"
    """
    Storage of binned or native spectra, opacity, wavelength and
    wave number grids.
    """
    def __init__(self, bin_type: str, spectrum_group):

        # SANITY CHECK: Only "binned" and "native" are valid options
        assert bin_type in ["binned", "native"]

        self.spectrum = spectrum_group[f"{bin_type}_spectrum"][()]
        self.std = spectrum_group[f"{bin_type}_std"][()]
        self.tau = spectrum_group[f"{bin_type}_tau"][()]
        self.wlgrid = spectrum_group[f"{bin_type}_wlgrid"][()]
        self.wlwidth = spectrum_group[f"{bin_type}_wlwidth"][()]
        self.wngrid = spectrum_group[f"{bin_type}_wngrid"][()]
        self.wnwidth = spectrum_group[f"{bin_type}_wnwidth"][()]


class ObservationData1366:
    """
    For now, this is specifically tailored to the spectrum provided with
    the ERS 1366 data
    """
    def __init__(self, filename: str) -> None:
        # Cut-off first line (column names)
        data = np.genfromtxt(fname=filename, comments="#")[1:]
        self.wl = data[:, 0]
        self.wl_binwidth = data[:, 1]
        self.tr_depth = data[:, 2]
        self.tr_depth_errneg = data[:, 3]
        self.tr_depth_errpos = data[:, 4]


class ObservationDataEureka:
    """
    For now, this is specifically tailored to the spectrum used with the
    """
    def __init__(self, filename: str) -> None:
        # Cut-off first line (column names)
        data = np.genfromtxt(fname=filename, comments="#")[1:]
        self.wl = data[:, 0]
        #self.wl_binwidth = data[:, 1]
        self.tr_depth = data[:, 1]
        self.tr_depth_errneg = data[:, 2]
        self.tr_depth_errpos = data[:, 2]